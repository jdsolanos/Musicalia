package Musicalia.sandbox;

/*Generated by MPS */

import javax.sound.midi.Sequence;
import javax.sound.midi.Track;
import javax.sound.midi.SysexMessage;
import javax.sound.midi.MidiEvent;
import javax.sound.midi.MetaMessage;
import java.nio.ByteBuffer;
import javax.sound.midi.ShortMessage;
import java.io.File;
import javax.sound.midi.MidiSystem;

public class firstTrack {

  public static void main(String[] args) {
    System.out.println("midi file begin");
    try {
      Sequence sequence = new Sequence(Sequence.PPQ, 24);
      Track track = sequence.createTrack();
      int t = 1;
      int note = 0;
      int intNote = 0;
      // general sys-ex turn on general midi set
      byte[] b = {(byte) 0xF0, (byte) 0x7E, (byte) 0x7F, (byte) 0x09, (byte) 0x01, (byte) 0xF7};
      SysexMessage sm = new SysexMessage();
      sm.setMessage(b, 6);
      MidiEvent me = new MidiEvent(sm, 0);
      track.add(me);

      // set tempo, 0x51 type is for setting tempo
      // the first byte of bt is the length of the value
      // the other bytes represent microseconds per quarter note in hex
      MetaMessage mt = new MetaMessage();
      int microseconds = 60000000;
      // default bpm = 120
      microseconds /= 120;
      byte[] bt = ByteBuffer.allocate(Integer.BYTES).putInt(microseconds).array();
      bt[0] = ((byte) (bt[0] + bt.length - 1));
      mt.setMessage((byte) 0x51, bt, bt.length);
      me = new MidiEvent(mt, 0);
      track.add(me);

      // set track name
      mt = new MetaMessage();
      String TrackName = new String("firstTrack");
      mt.setMessage((byte) 0x03, TrackName.getBytes(), TrackName.length());
      me = new MidiEvent(mt, 0);
      track.add(me);

      // set omni on

      ShortMessage mm = new ShortMessage();
      mm.setMessage((byte) 0xB0, (byte) 0x7D, 0x00);
      me = new MidiEvent(mm, 0);
      track.add(me);

      // set poly on

      mm = new ShortMessage();
      mm.setMessage((byte) 0xB0, (byte) 0x7F, 0x00);
      me = new MidiEvent(mm, 0);
      track.add(me);

      // set instrument to piano

      mm = new ShortMessage();
      mm.setMessage((byte) 0x90, (byte) 0x3C, 0x60);
      me = new MidiEvent(mm, 0);
      track.add(me);

      // placeholder for notes
      switch ("A") {
        case "A":
          intNote = 9;
          break;
        case "A#":
          intNote = 10;
          break;
        case "B":
          intNote = 11;
          break;
        case "C":
          intNote = 0;
          break;
        case "C#":
          intNote = 1;
          break;
        case "D":
          intNote = 2;
          break;
        case "D#":
          intNote = 3;
          break;
        case "E":
          intNote = 4;
          break;
        case "F":
          intNote = 5;
          break;
        case "F#":
          intNote = 6;
          break;
        case "G":
          intNote = 7;
          break;
        case "G#":
          intNote = 8;
          break;
      }
      note = 12 * 5 + intNote;
      mm = new ShortMessage();
      mm.setMessage(ShortMessage.NOTE_ON, (byte) note, 100);
      me = new MidiEvent(mm, t);
      track.add(me);

      mm = new ShortMessage();
      mm.setMessage(ShortMessage.PITCH_BEND, 64, 64);
      me = new MidiEvent(mm, t);
      track.add(me);

      mm = new ShortMessage();
      mm.setMessage(ShortMessage.NOTE_OFF, (byte) note, 100);
      me = new MidiEvent(mm, t + 4);
      track.add(me);
      t += 4;
      switch ("E") {
        case "A":
          intNote = 9;
          break;
        case "A#":
          intNote = 10;
          break;
        case "B":
          intNote = 11;
          break;
        case "C":
          intNote = 0;
          break;
        case "C#":
          intNote = 1;
          break;
        case "D":
          intNote = 2;
          break;
        case "D#":
          intNote = 3;
          break;
        case "E":
          intNote = 4;
          break;
        case "F":
          intNote = 5;
          break;
        case "F#":
          intNote = 6;
          break;
        case "G":
          intNote = 7;
          break;
        case "G#":
          intNote = 8;
          break;
      }
      note = 12 * 5 + intNote;
      mm = new ShortMessage();
      mm.setMessage(ShortMessage.NOTE_ON, (byte) note, 23);
      me = new MidiEvent(mm, t);
      track.add(me);

      mm = new ShortMessage();
      mm.setMessage(ShortMessage.PITCH_BEND, 64, 64);
      me = new MidiEvent(mm, t);
      track.add(me);

      mm = new ShortMessage();
      mm.setMessage(ShortMessage.NOTE_OFF, (byte) note, 23);
      me = new MidiEvent(mm, t + 4);
      track.add(me);
      t += 4;

      // set end of the track 19 ticks later
      mt = new MetaMessage();
      byte[] bet = {};
      mt.setMessage((byte) 0x2F, bet, 0);
      me = new MidiEvent(mt, 140);
      track.add(me);

      // write the midi file
      String route = "firstTrack" + ".mid";
      File file = new File(route);
      MidiSystem.write(sequence, 1, file);

    } catch (Exception ex) {
      ex.printStackTrace();
    }

    System.out.println("midifile end");
  }
}
